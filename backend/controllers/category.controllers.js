import prisma from "../utils/prisma.js";

/**
 * Crea una nueva categor√≠a
 * @param {Object} req - Objeto de solicitud
 * @param {Object} res - Objeto de respuesta
 */
export const createCategory = async (req, res) => {
	try {
		console.log("Creando categor√≠a con datos:", req.body);
		const { name, description } = req.body;

		// Validar datos requeridos
		if (!name) {
			return res.status(400).json({ 
				success: false,
				message: "El nombre de la categor√≠a es obligatorio" 
			});
		}

		// Verificar si ya existe una categor√≠a con el mismo nombre
		const existingCategory = await prisma.category.findFirst({
			where: { name },
		});

		if (existingCategory) {
			return res.status(400).json({ 
				success: false,
				message: "Ya existe una categor√≠a con este nombre" 
			});
		}

		// Crear nueva categor√≠a
		const newCategory = await prisma.category.create({
			data: {
				name,
				description: description || "",
			},
		});

		console.log("Categor√≠a creada:", newCategory);

		res.status(201).json({
			success: true,
			message: "Categor√≠a creada correctamente",
			data: newCategory
		});
	} catch (error) {
		console.error("Error al crear categor√≠a:", error);
		res.status(500).json({ 
			success: false,
			message: "Error al crear la categor√≠a",
			error: error.message
		});
	}
};

/**
 * Obtiene todas las categor√≠as con paginaci√≥n opcional
 * @param {Object} req - Objeto de solicitud
 * @param {Object} res - Objeto de respuesta
 */
export const getAllCategories = async (req, res) => {
	try {
		console.log('üì• Recibida petici√≥n GET /categories');
		const { page = 1, limit = 10 } = req.query;
		const skip = (parseInt(page) - 1) * parseInt(limit);
		const take = parseInt(limit);

		// Obtener categor√≠as con paginaci√≥n
		const [categories, totalCount] = await Promise.all([
			prisma.category.findMany({
				skip,
				take,
				orderBy: {
					name: 'asc'
				}
			}),
			prisma.category.count()
		]);

		console.log(`‚úÖ Encontradas ${categories.length} categor√≠as de un total de ${totalCount}`);

		res.status(200).json({
			success: true,
			categories,
			totalCount,
			currentPage: parseInt(page),
			totalPages: Math.ceil(totalCount / take),
		});
	} catch (error) {
		console.error("‚ùå Error al obtener categor√≠as:", error);
		res.status(500).json({ 
			success: false,
			message: "Error al obtener las categor√≠as",
			error: error.message
		});
	}
};

/**
 * Obtiene una categor√≠a por su ID
 * @param {Object} req - Objeto de solicitud
 * @param {Object} res - Objeto de respuesta
 */
export const getCategoryById = async (req, res) => {
	try {
		const { id } = req.params;

		// Validar ID
		if (!id || isNaN(parseInt(id))) {
			return res.status(400).json({ message: "ID de categor√≠a inv√°lido" });
		}

		// Buscar categor√≠a por ID
		const category = await prisma.category.findUnique({
			where: { id: parseInt(id) },
			include: {
				products: true, // Incluir productos relacionados con esta categor√≠a
			},
		});

		if (!category) {
			return res.status(404).json({ message: "Categor√≠a no encontrada" });
		}

		res.status(200).json(category);
	} catch (error) {
		console.error("Error al obtener categor√≠a:", error);
		res.status(500).json({ message: "Error al obtener la categor√≠a" });
	}
};

/**
 * Actualiza una categor√≠a existente
 * @param {Object} req - Objeto de solicitud
 * @param {Object} res - Objeto de respuesta
 */
export const updateCategory = async (req, res) => {
	try {
		const { id } = req.params;
		const { name, description } = req.body;

		// Validar ID
		if (!id || isNaN(parseInt(id))) {
			return res.status(400).json({ message: "ID de categor√≠a inv√°lido" });
		}

		// Verificar si la categor√≠a existe
		const existingCategory = await prisma.category.findUnique({
			where: { id: parseInt(id) },
		});

		if (!existingCategory) {
			return res.status(404).json({ message: "Categor√≠a no encontrada" });
		}

		// Si se actualiza el nombre, verificar que no exista otra categor√≠a con ese nombre
		if (name && name !== existingCategory.name) {
			const categoryWithSameName = await prisma.category.findUnique({
				where: { name },
			});

			if (categoryWithSameName) {
				return res.status(400).json({ message: "Ya existe una categor√≠a con este nombre" });
			}
		}

		// Actualizar categor√≠a
		const updatedCategory = await prisma.category.update({
			where: { id: parseInt(id) },
			data: {
				name: name || existingCategory.name,
				description: description !== undefined ? description : existingCategory.description,
			},
		});

		res.status(200).json(updatedCategory);
	} catch (error) {
		console.error("Error al actualizar categor√≠a:", error);
		res.status(500).json({ message: "Error al actualizar la categor√≠a" });
	}
};

/**
 * Elimina una categor√≠a
 * @param {Object} req - Objeto de solicitud
 * @param {Object} res - Objeto de respuesta
 */
export const deleteCategory = async (req, res) => {
	try {
		const { id } = req.params;

		// Validar ID
		if (!id || isNaN(parseInt(id))) {
			return res.status(400).json({ message: "ID de categor√≠a inv√°lido" });
		}

		// Verificar si la categor√≠a existe
		const existingCategory = await prisma.category.findUnique({
			where: { id: parseInt(id) },
			include: {
				products: true,
			},
		});

		if (!existingCategory) {
			return res.status(404).json({ message: "Categor√≠a no encontrada" });
		}

		// Verificar si hay productos asociados a esta categor√≠a
		if (existingCategory.products.length > 0) {
			return res.status(400).json({ 
				message: "No se puede eliminar la categor√≠a porque tiene productos asociados",
				productCount: existingCategory.products.length
			});
		}

		// Eliminar categor√≠a
		await prisma.category.delete({
			where: { id: parseInt(id) },
		});

		res.status(200).json({ message: "Categor√≠a eliminada exitosamente" });
	} catch (error) {
		console.error("Error al eliminar categor√≠a:", error);
		res.status(500).json({ message: "Error al eliminar la categor√≠a" });
	}
};